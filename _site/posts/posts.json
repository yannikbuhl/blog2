[
  {
    "path": "posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/",
    "title": "Automated Reporting on Lacking Rainfall in Germany",
    "description": "Climate change causes severe disturbances in what we used to call a more or less stable climate.",
    "author": [
      {
        "name": "Yannik",
        "url": "yannikbuhl.de"
      }
    ],
    "date": "2021-06-13",
    "categories": [],
    "contents": "\nClimate change causes severe disturbances in what we used to call a more or less stable climate. Germany, just as many other countries around the globe, suffers from an increasing lack of rainfall, which in turn causes situations close to what is called a draught. Data journalists are, thus, increasingly focusing on quantifying the effects of the climate crisis. When I used to work as an Editor at Stuttgarter Zeitung, I contributed to this journalistic goal by writing and automating a script that would help us tell the readers which region of Baden-Württemberg, Germany, has suffered from the longest absence of rainfall.\nIt is a more or less easy way of automating reports on the climate’s effects on our weather. In the following, I demonstrate how my script looks like. The data come from the German National Weather Service (DWD, Deutscher Wetterdienst).\nFirst, what you need is a bunch of packages:\n\nlibrary(pacman)\npacman::p_load(rdwd, magrittr, dplyr, here, bit64, lubridate, readxl, purrr, backports, remotes)\n\n\nremotes::install_github(\"munichrocker/DatawRappr\")\nlibrary(DatawRappr)\n\nSecond, you need a list of all the DWD stations (including their IDs) that provide the desired measures (in this case, amount of rainfall, but this could also be temperature, etc.):\n\n# Get stations\nstationen <- readxl::read_excel(here::here(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/stationen_bw.xlsx\"))\nhead(stationen)\n# A tibble: 6 x 6\n  stations_id stationshoehe stationsname          lufttemperatur  wind\n        <dbl>         <dbl> <chr>                          <dbl> <dbl>\n1          11           680 Donaueschingen Lande…              0     1\n2        1013           309 Dogern                             0     1\n3        1346          1490 Feldberg/Schwarzwald               0     1\n4        1443           237 Freiburg                           0     1\n5        1468           797 Freudenstadt                       0     1\n6        1490           394 Friedrichshafen                    0     1\n# … with 1 more variable: niederschlag <dbl>\n\nFor an analysis on rainfall, we need to extract those stations that measure it:\n\n# Get all stations\nniederschlag <- stationen$stations_id[stationen$niederschlag == 1]\n\nIn case you want to automate this script, create a folder where you want to store the data that the {rdwd} package downloads:\n\n# Check if folder for zip data exists & create it if necessary\nif (dir.exists(here::here(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\")) == FALSE) {dir.create(here::here(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\"))}\n\nAfter these initial steps, we can start to download and process recent rainfall data from all stations involved. I download the data on a daily resolution first. Doing so, we can simply count the days since the last rainfall:\n\n# Get URLs for DWD zip files\ndownload <- rdwd::selectDWD(id = niederschlag, \n                            res = \"daily\", \n                            outvec = TRUE, \n                            var = \"more_precip\", \n                            per = \"recent\")\n\n# Download actual zip files and extract data as lists\nres1 <- rdwd::dataDWD(url = download, \n                      dir = here::here(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\"), \n                      force = TRUE, \n                      quiet = TRUE, \n                      overwrite = TRUE)\n\n# Create general data frame from all lists\nres1 %>% purrr::map_dfr(as.data.frame) -> res2\nres2 %>% filter(MESS_DATUM > as.POSIXct(\"2020-01-01\")) -> res2\n\n# Process and find last day of niederschlag\nresults <- res2 %>% group_by(STATIONS_ID) %>% \n  mutate(MESS_DATUM = as.POSIXct(MESS_DATUM)) %>% \n  filter(RS > 0) %>% \n  summarise(niederschlag = last(RS), time = last(MESS_DATUM)) %>% \n  mutate(days = as.integer(Sys.Date() - as.Date(time))) %>% \n  arrange(desc(days)) %>% \n  rename(stations_id = STATIONS_ID) %>% \n  mutate(time = format(time, format = \"%d.%m.%Y\"))\n\n# Check if folder with zip files exists and delete if present\nif (dir.exists(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\") == TRUE) {\n      unlink(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\", recursive = TRUE)\n}\n\nWhat is necessary now is to check whether there has been rainfall on this present day. If so, we have to set the counter of days without rain to 0:\n\nrecent1 <- rdwd::selectDWD(id = niederschlag, \n                           res = \"10_minutes\", \n                           outvec = TRUE, \n                           var = \"precipitation\", \n                           per = \"now\")\n\nif (dir.exists(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\") == FALSE) {dir.create(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\")}\n\n# Download actual zip files and extract data as lists\nrecent2 <- rdwd::dataDWD(url = recent1, \n                         dir = here::here(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\"), \n                         force = TRUE, \n                         quiet = TRUE, \n                         overwrite = TRUE)\n\n# Create general data frame from all lists\nrecent2 %>% purrr::map_dfr(as.data.frame) -> recent3\n\n# Delete unused columns and delete all data before yesterday to prevent errors\nrecent3 %>% filter(MESS_DATUM > Sys.Date() - 1) %>% \n  dplyr::select(STATIONS_ID, MESS_DATUM, RWS_10) -> recent3\n\n# Wrangle data frame with weather data to get last value\nplausible <- recent3 %>% group_by(STATIONS_ID) %>% \n  summarise(sum = sum(RWS_10)) %>% \n  filter(sum > 0)\n\nif (sum(results$stations_id %in% plausible$STATIONS_ID) != 0) {\n  \n  for (i in seq_along(plausible$STATIONS_ID)) {\n    \n    id <- plausible$STATIONS_ID[i]\n    \n    results$time[results$stations_id == id] <- format(Sys.Date(), format = \"%d.%m.%Y\")\n    results$days[results$stations_id == id] <- 0\n    results$niederschlag[results$stations_id == id] <- plausible$sum[plausible$STATIONS_ID == id]\n    \n    rm(id)\n    \n  }\n  \n}\n\nresults <- results %>% arrange(desc(days))\nresults_regen <- results %>% arrange(desc(niederschlag))\n\nWhat is left now is to create the final data set:\n\n# Get names and station information\nstationen2 <- stationen %>% filter(niederschlag == 1) %>% select(-lufttemperatur, -niederschlag, -wind)\n\n# Join weather dataset with stations dataset to get stations' names\nresults2 <- inner_join(results, stationen2, by = \"stations_id\") %>% \n  select(stationsname, days, niederschlag, time, stationshoehe) %>% \n  mutate(days = paste(days, \"Tag/en\")) %>% \n  rename(Station = stationsname, \n         `Letzter Niederschlag vor` = days,\n         `Niederschlag (in Litern)` = niederschlag,\n         `Letzter Niederschlag` = time,\n         `Stationshöhe (Meter)` = stationshoehe)\n\nif (dir.exists(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\") == TRUE) {\n  unlink(\"_posts/2021-06-13-automated-reporting-on-lacking-rainfall-in-germany/wetter\", recursive = TRUE)\n}\n\nThe result looks like this:\n\nhead(results2)\n# A tibble: 6 x 5\n  Station     `Letzter Niedersch… `Niederschlag (in… `Letzter Nieders…\n  <chr>       <chr>                            <dbl> <chr>            \n1 Dietenheim  6 Tag/en                           4   07.06.2021       \n2 Ihringen    5 Tag/en                          13.9 08.06.2021       \n3 Konstanz    5 Tag/en                          20.7 08.06.2021       \n4 Stuttgart … 5 Tag/en                           0.7 08.06.2021       \n5 Aulendorf-… 5 Tag/en                           0.8 08.06.2021       \n6 Baden-Bade… 4 Tag/en                           2.1 09.06.2021       \n# … with 1 more variable: Stationshöhe (Meter) <dbl>\n\nAs a data journalist, I sent these data to a Datawrapper chart (which is essentially a table) that displays all weather stations involved, the days since the last rainfall and the amount of rainfall the last time it rained:\n\n# Capture output which tells the URL of the chart\ncapture.output(dw_data_to_chart(x = results2, chart_id = \"abcdef\"), file = \"/dev/null\")\n\n## Send data to datawrapper\nlog <- capture.output(dw_publish_chart(chart_id = \"abcdef\"))\n\nOn a side note, my R script triggers a python script on my Raspberry Pi if an error occurred and no valid URL was put out; the script will send an E-mail notifying me of the error:\n\n# If there was no valid URL in the output, trigger python script.\nif (grepl(pattern = \"https://datawrapper.dwcdn.net/lxpOi\", log[6]) == FALSE) {\n\n    system(\"python3 ~Documents/scripts/duerre.py\")\n\n} else {\n\n    print(paste0(log[6], \" //// \", Sys.time()))\n\n}\n\nThis whole script runs on my Raspberry Pi 3 using a Cronjob.\n\n\n",
    "preview": {},
    "last_modified": "2021-06-13T21:28:34+02:00",
    "input_file": {}
  }
]
